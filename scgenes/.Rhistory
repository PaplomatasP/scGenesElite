library(chatgpt)
Sys.setenv(OPENAI_API_KEY = "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")
cat(ask_chatgpt("What do you think about R language?"))
#load data
data(gse16873.d)
library(pathview)
#load data
data(gse16873.d)
View(gse16873.d)
GenesRF <- readRDS("~/GenesRF.rds")
gene_symbols  <- rownames(GenesRF)
entrez_ids <- mapIds(org.Hs.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
library(org.Hs.eg.db)
library(AnnotationDbi)
gene_symbols  <- rownames(GenesRF)
entrez_ids <- mapIds(org.Hs.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
rownames(GenesRF) <- entrez_ids
View(GenesRF)
plot_pathview <- function(gene.data, pathway.id, species, save_image = FALSE) { # Species = "mmu" or "hsa
library(pathview)
# Run pathview function and capture the output message
msg <- pathview::pathview(gene.data = gene.data, pathway.id = pathway.id,
species = species, out.suffix = "",
save.image = save_image, kegg.native =T )
}
# Generate the plot
plot_pathview(gene.data =  GenesRF, pathway.id = "05223", species = "hsa", save_image = FALSE)
# Generate the plot
plot_pathview(gene.data =  GenesRF, pathway.id = "05223", species = "hsa", save_image = FALSE)
iG <- GenesRF
View(iG)
shiny::runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
runApp('C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes')
setwd("C:/Users/ppapl/MEGA/Projects/2023/scGenesEliteRepo/scgenes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(b)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(excludeGene)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(bods)
runApp()
runApp()
runApp()
runApp()
View(b)
#function to create a PPI network analysis to the isolated genes.
PPInetwork = function(Genes) {
withProgress(message = 'Please wait........', value = 0, {
{
incProgress(2 / 10)
Sys.sleep(0.10)
if (input$organismus == "Human") {
PPI_species = 9606
} else{
PPI_species = 10090
}
string_db <- STRINGdb$new(
version = "11.5",
species = PPI_species,
score_threshold = input$Score_Threshold_PPI,
network_type = "full",
input_directory = ""
)
}
{
incProgress(8 / 10)
Sys.sleep(0.10)
if (input$Genes < nrow(iG)) {
GenesN = input$Genes
} else{
GenesN = nrow(iG)
}
dfGenes<- data.frame(cbind(Genes[,1][1:GenesN],row.names(Genes)[1:GenesN]) )
colnames(dfGenes)[1] = "Score"
colnames(dfGenes)[2] = "Genes"
Mapped <-
string_db$map(dfGenes, "Genes", removeUnmappedRows = TRUE)
hits <- Mapped$STRING_id
string_db$plot_network(hits)
}
})
}
PPInetwork(b)
Genes = b
PPI_species = 9606
string_db <- STRINGdb$new(
version = "11.5",
species = PPI_species,
score_threshold = input$Score_Threshold_PPI,
network_type = "full",
input_directory = ""
)
GenesN = input$Genes
GenesN = nrow(iG)
runApp()
runApp()
shiny::runApp()
View(neudata)
runApp()
Labels = data[, ncol(data)]
data = d
iG = i
Labels = data[, ncol(data)]
View(data)
runApp()
runApp()
runApp()
runApp()
View(Seraut_obj)
256 * 2048 ^ 2
runApp()
runApp()
gc()
